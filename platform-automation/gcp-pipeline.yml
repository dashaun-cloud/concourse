# fly -t cp set-pipeline -c gcp-pipeline.yml -p platform-automation -l us-central1.yml -n
---
resource_types:
- name: google-cloud-storage
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: products-bucket
  type: google-cloud-storage
  source:
    regexp: ".*"
    bucket: ((project))-((env_name))
    json_key: |
      ((gcp_credentials_json))

- name: platform-automation-tasks
  type: google-cloud-storage
  source:
    regexp: platform-automation-tasks-(.*).zip
    bucket: ((project))-((env_name))
    json_key: |
      ((gcp_credentials_json))

- name: platform-automation-image
  type: google-cloud-storage
  source:
    regexp: platform-automation-image-(.*).tgz
    bucket: ((project))-((env_name))
    json_key: |
      ((gcp_credentials_json))

- name: platform-automation
  type: pivnet
  source:
    product_slug: platform-automation
    api_token: ((pivnet_token))

- name: controlplane-pipelines
  type: git
  source:
    branch: master
    uri: git@github.com:dashaun-cloud/controlplane-pipelines.git
    private_key: ((git_ssh_key))

- name: terraform
  type: terraform
  source:
    env_name: ((env_name))
    backend_type: gcs
    backend_config:
      bucket: terraform-state-dashaun-cloud
      prefix: ((env_name))
      credentials: ((gcp_credentials_json))
    delete_on_failure: true
    vars:
      project: ((project))
      service_account_key: ((gcp_credentials_json))

jobs:
- name: terraform-apply
  plan:
  - get: controlplane-pipelines
    trigger: false
  - put: terraform
    params:
      env_name: ((env_name))
      terraform_source: controlplane-pipelines/platform-automation/gcp/

- name: terraform-destroy
  plan:
  - get: controlplane-pipelines
    trigger: false
  - put: terraform
    get_params:
      action: destroy
    params:
      action: destroy
      env_name: ((env_name))
      terraform_source: controlplane-pipelines/platform-automation/gcp/

- name: fetch-platform-automation
  plan:
  - get: platform-automation
  - get: controlplane-pipelines
  - put: products-bucket
    params:
      file: platform-automation/*tasks*.zip
  - put: products-bucket
    params:
      file: platform-automation/*image*.tgz

- name: fetch-pas-product-and-stemcell
  plan:
  - get: platform-automation-image
    params: {unpack: true}
  - get: platform-automation-tasks
    params: {unpack: true}
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: controlplane-pipelines/platform-automation/gcp/pas-config.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}